import re
from typing import Optional, Dict, List, Union
from datetime import datetime, timedelta
import logging
from telethon.tl.types import User, Channel, Chat

logger = logging.getLogger(__name__)

def validate_username(username: str) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ username
    """
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    username = username.lstrip('@')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    if not re.match(r'^[a-zA-Z]\w{3,30}[a-zA-Z0-9]$', username):
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username")
    
    return username

def format_time_remaining(seconds: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
    """
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    
    if hours > 0:
        return f"{hours} —á. {minutes} –º–∏–Ω."
    return f"{minutes} –º–∏–Ω."

def calculate_invite_stats(
    total_users: int,
    daily_limit: int,
    current_invited: int
) -> Dict[str, Union[int, str]]:
    """
    –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
    """
    remaining_users = total_users - current_invited
    remaining_days = (remaining_users + daily_limit - 1) // daily_limit
    total_time = remaining_days * 24  # —á–∞—Å—ã
    
    return {
        "remaining_users": remaining_users,
        "remaining_days": remaining_days,
        "total_time": f"{total_time} —á–∞—Å–æ–≤",
        "daily_limit": daily_limit,
        "progress_percent": round((current_invited / total_users) * 100, 1)
    }

async def extract_entity_info(entity: Union[User, Channel, Chat]) -> Optional[Dict[str, str]]:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ Telethon entity
    """
    try:
        if isinstance(entity, (Channel, Chat)):
            return {
                "id": str(entity.id),
                "name": entity.title,
                "username": entity.username if hasattr(entity, 'username') else None,
                "type": "channel" if isinstance(entity, Channel) else "chat"
            }
        elif isinstance(entity, User):
            return {
                "id": str(entity.id),
                "name": f"{entity.first_name or ''} {entity.last_name or ''}".strip(),
                "username": entity.username,
                "type": "user"
            }
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return None

def format_group_info(group_data: Dict[str, str]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
    """
    return (
        f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {group_data['name']}\n"
        f"üîó Username: @{group_data['username']}\n"
        f"üÜî ID: {group_data['id']}"
    )

def check_invite_limits(
    last_invite_date: Optional[datetime],
    decline_date: Optional[datetime],
    daily_limit: int,
    current_count: int
) -> Dict[str, Union[bool, str]]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
    """
    now = datetime.now()
    result = {"can_invite": False, "reason": ""}

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    if current_count >= daily_limit:
        result["reason"] = f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({daily_limit} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π)"
        return result

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞
    if decline_date:
        days_since_decline = (now - decline_date).days
        if days_since_decline < 30:
            result["reason"] = f"–ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â–µ {30 - days_since_decline} –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞"
            return result

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    if last_invite_date:
        hours_since_invite = (now - last_invite_date).total_seconds() / 3600
        if hours_since_invite < 24:
            result["reason"] = f"–ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â–µ {format_time_remaining(int((24 - hours_since_invite) * 3600))}"
            return result

    result["can_invite"] = True
    return result

def generate_progress_bar(current: int, total: int, length: int = 20) -> str:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    """
    filled = int(length * current / total)
    bar = '‚ñà' * filled + '‚ñë' * (length - filled)
    percent = round(100 * current / total, 1)
    return f"{bar} {percent}%"

def format_invite_status(stats: Dict[str, int]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
    """
    total = stats["total"]
    invited = stats["invited"]
    declined = stats["declined"]
    not_invited = stats["not_invited"]
    
    progress_bar = generate_progress_bar(invited, total)
    
    return (
        f"üìä –°—Ç–∞—Ç—É—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞:\n"
        f"{progress_bar}\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
        f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited}\n"
        f"‚õîÔ∏è –û—Ç–∫–∞–∑–æ–≤: {declined}\n"
        f"‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {not_invited}"
    )

def validate_group_link(link: str) -> Optional[str]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ username –∏–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É
    """
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫
    patterns = [
        r'(?:https?://)?(?:t\.me|telegram\.me)/([a-zA-Z]\w{3,30}[a-zA-Z0-9])',
        r'@([a-zA-Z]\w{3,30}[a-zA-Z0-9])',
        r'^([a-zA-Z]\w{3,30}[a-zA-Z0-9])$'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, link)
        if match:
            return match.group(1)
    
    return None
