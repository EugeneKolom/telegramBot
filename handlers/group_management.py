from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db import Database
from telethon import TelegramClient
from telethon.tl.functions.channels import GetFullChannelRequest
from states.states import BotStates
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = Router()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä—É–ø–ø
@router.message(F.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–ø–ø—ã")
async def view_groups(message: Message, telethon_client=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
    try:
        if not telethon_client:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        db = Database("bot_database.db")
        cursor = db.execute("""
            SELECT 
                g.id,
                g.name,
                g.username,
                (SELECT COUNT(*) FROM contacts WHERE group_id = g.id) as parsed_users,
                (SELECT COUNT(*) FROM invites WHERE group_id = g.id AND status = 'success') as invited_users
            FROM groups g
        """)
        groups = cursor.fetchall()
        
        if not groups:
            await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
            return
            
        groups_text = []
        
        for group in groups:
            parsed_users = group[3] if group[3] is not None else 0
            invited_users = group[4] if group[4] is not None else 0
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Telethon
                group_entity = await telethon_client.get_entity(f"t.me/{group[2]}")
                full_chat = await telethon_client(GetFullChannelRequest(group_entity))
                participants_count = full_chat.full_chat.participants_count
                
                groups_text.append(
                    f"üì± {group[1]} (@{group[2]})\n"
                    f"üë• ID: {group[0]}\n"
                    f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {participants_count}\n"
                    f"üì• –°–ø–∞—Ä—Å–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {parsed_users}\n"
                    f"üì® –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited_users}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ {group[2]}: {e}")
                groups_text.append(
                    f"üì± {group[1]} (@{group[2]})\n"
                    f"üë• ID: {group[0]}\n"
                    f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                    f"üì• –°–ø–∞—Ä—Å–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {parsed_users}\n"
                    f"üì® –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited_users}"
                )

        await message.answer(
            "üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:\n\n" + "\n\n".join(groups_text)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")

# –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø —Å –≥–∞–ª–æ—á–∫–∞–º–∏
@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def delete_group_start(message: Message, state: FSMContext, telethon_client=None):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø —Å –≤—ã–±–æ—Ä–æ–º —á–µ—Ä–µ–∑ –≥–∞–ª–æ—á–∫–∏"""
    try:
        if not telethon_client:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        db = Database("bot_database.db")
        cursor = db.execute("SELECT * FROM groups")
        groups = cursor.fetchall()
        
        if not groups:
            await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(found_groups=groups)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–∞–ª–æ—á–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        for i, group in enumerate(groups):
            username_part = f"(@{group[2]})" if group[2] else "(–±–µ–∑ username)"
            builder.button(
                text=f"‚¨úÔ∏è {group[1]} {username_part}",
                callback_data=f"delete_group_select_{i}"
            )
        
        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="delete_group_select_all")
        builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="delete_group_deselect_all")
        builder.button(text="üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="delete_group_confirm")
        
        builder.adjust(1)
        
        await message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        await state.set_state(BotStates.deleting_groups)
        await state.update_data(selected_groups=[])
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")

@router.callback_query(lambda c: c.data.startswith("delete_group_select_"))
async def toggle_group_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞/—Å–Ω—è—Ç–∏—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    try:
        index = int(callback.data.split("_")[3])
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])
        selected_groups = state_data.get("selected_groups", [])
        
        if index in selected_groups:
            selected_groups.remove(index)
        else:
            selected_groups.append(index)
            
        await state.update_data(selected_groups=selected_groups)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        for i, group in enumerate(found_groups):
            checkbox = "‚úÖ" if i in selected_groups else "‚¨úÔ∏è"
            username_part = f"(@{group[2]})" if group[2] else "(–±–µ–∑ username)"
            builder.button(
                text=f"{checkbox} {group[1]} {username_part}",
                callback_data=f"delete_group_select_{i}"
            )
        
        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="delete_group_select_all")
        builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="delete_group_deselect_all")
        builder.button(text="üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="delete_group_confirm")
        
        builder.adjust(1)
        
        await callback.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã")

@router.callback_query(lambda c: c.data == "delete_group_select_all")
async def handle_select_all(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≤—Å–µ—Ö –≥—Ä—É–ø–ø"""
    try:
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])
        
        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
        selected_groups = list(range(len(found_groups)))
        await state.update_data(selected_groups=selected_groups)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        for i, group in enumerate(found_groups):
            checkbox = "‚úÖ" if i in selected_groups else "‚¨úÔ∏è"
            username_part = f"(@{group[2]})" if group[2] else "(–±–µ–∑ username)"
            builder.button(
                text=f"{checkbox} {group[1]} {username_part}",
                callback_data=f"delete_group_select_{i}"
            )
        
        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="delete_group_select_all")
        builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="delete_group_deselect_all")
        builder.button(text="üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="delete_group_confirm")
        
        builder.adjust(1)
        
        await callback.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø")

@router.callback_query(lambda c: c.data == "delete_group_deselect_all")
async def handle_deselect_all(callback: CallbackQuery, state: FSMContext):
    """–°–Ω—è—Ç–∏–µ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø"""
    try:
        # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
        await state.update_data(selected_groups=[])
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])
        
        if not found_groups:
            await callback.answer("‚ùå –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –≤—ã–±–æ—Ä–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—É—Å—Ç—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        for i, group in enumerate(found_groups):
            checkbox = "‚¨úÔ∏è"  # –í—Å–µ –≥–∞–ª–æ—á–∫–∏ —Å–Ω—è—Ç—ã
            username_part = f"(@{group[2]})" if group[2] else "(–±–µ–∑ username)"
            builder.button(
                text=f"{checkbox} {group[1]} {username_part}",
                callback_data=f"delete_group_select_{i}"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="delete_group_select_all")
        builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="delete_group_deselect_all")
        builder.button(text="üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="delete_group_confirm")
        
        builder.adjust(1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.answer("–í—ã–±–æ—Ä —Å–Ω—è—Ç")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –≤—ã–±–æ—Ä–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –≤—ã–±–æ—Ä–∞")

@router.callback_query(lambda c: c.data == "delete_group_confirm")
async def handle_confirm_deletion(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø"""
    try:
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])
        selected_groups = state_data.get("selected_groups", [])
        
        if not selected_groups:
            await callback.answer("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã")
            return
            
        db = Database("bot_database.db")
        deleted_count = 0
        
        for index in selected_groups:
            group = found_groups[index]
            db.execute("DELETE FROM groups WHERE id = ?", (group[0],))
            deleted_count += 1
        
        db.commit()
        
        await callback.message.edit_text(
            f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –≥—Ä—É–ø–ø: {deleted_count}\n\n"
            f"üóëÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã."
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤—Ä—É—á–Ω—É—é
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –≤—Ä—É—á–Ω—É—é")
async def add_group_manually(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤—Ä—É—á–Ω—É—é"""
    example_message = (
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
        "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ https://t.me/group_name\n"
        "‚Ä¢ t.me/group_name\n"
        "‚Ä¢ @group_name\n"
        "‚Ä¢ group_name\n\n"
        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ https://t.me/+AbCdEf123456\n"
        "‚Ä¢ https://t.me/joinchat/AbCdEf123456\n"
        "‚Ä¢ +AbCdEf123456\n\n"
        "‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω–æ–π –∏ –∏–º–µ—Ç—å username"
    )
    await message.answer(example_message)
    await state.set_state(BotStates.waiting_for_group_name)

@router.message(BotStates.waiting_for_group_name)
async def process_group_name(message: Message, state: FSMContext, telethon_client=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username –≥—Ä—É–ø–ø—ã"""
    try:
        if not telethon_client:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        group_username = message.text.strip()
        
        # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –æ—Ç –ª–∏—à–Ω–µ–≥–æ
        if 't.me/' in group_username:
            group_username = group_username.split('t.me/')[-1]
        elif '@' in group_username:
            group_username = group_username.lstrip('@')
            
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group_entity = await telethon_client.get_entity(f"t.me/{group_username}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É –≤ –±–∞–∑—É
            db = Database("bot_database.db")
            db.execute(
                "INSERT OR IGNORE INTO groups (id, name, username) VALUES (?, ?, ?)",
                (group_entity.id, group_entity.title, group_username)
            )
            db.commit()
            
            await message.answer(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üì± –ù–∞–∑–≤–∞–Ω–∏–µ: {group_entity.title}\n"
                f"üîó Username: @{group_username}\n"
                f"üÜî ID: {group_entity.id}"
            )
            
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:\n"
                f"{str(e)}\n\n"
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                f"‚Ä¢ –ì—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                f"‚Ä¢ –ì—Ä—É–ø–ø–∞ –ø—É–±–ª–∏—á–Ω–∞—è\n"
                f"‚Ä¢ –£–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username"
            )
            
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()