import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from telethon import TelegramClient
from telethon.tl.functions.channels import GetFullChannelRequest
from database.db import Database
from states.states import BotStates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

router = Router()

@router.message(F.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–ø–ø—ã")
async def view_groups(message: Message, telethon_client: TelegramClient):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π."""
    try:
        if not telethon_client or not await telethon_client.is_user_authorized():
            logger.error("Telethon client not found or not authorized")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return

        db = Database("bot_database.db")
        cursor = db.execute("""
            SELECT 
                g.id,
                g.name,
                g.username,
                (SELECT COUNT(*) FROM contacts WHERE group_id = g.id) as parsed_users,
                (SELECT COUNT(*) FROM invites WHERE group_id = g.id AND status = 'success') as invited_users
            FROM groups g
        """)
        groups = cursor.fetchall()
        
        if not groups:
            logger.warning("No groups stored in the database")
            await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
            return
            
        groups_text = []
        
        for group in groups:
            parsed_users = group[3] or 0
            invited_users = group[4] or 0
            try:
                group_entity = await telethon_client.get_entity(f"t.me/{group[2]}")
                full_chat = await telethon_client(GetFullChannelRequest(group_entity))
                participants_count = full_chat.full_chat.participants_count
                
                groups_text.append(
                    f"üì± {group[1]} (@{group[2]})\n"
                    f"üë• ID: {group[0]}\n"
                    f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {participants_count}\n"
                    f"üì• –°–ø–∞—Ä—Å–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {parsed_users}\n"
                    f"üì® –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited_users}"
                )
            except Exception as e:
                logger.error(f"Error retrieving group info for {group[2]}: {e}")
                groups_text.append(
                    f"üì± {group[1]} (@{group[2]})\n"
                    f"üë• ID: {group[0]}\n"
                    f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                    f"üì• –°–ø–∞—Ä—Å–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {parsed_users}\n"
                    f"üì® –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited_users}"
                )

        await message.answer(
            "üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:\n\n" + "\n\n".join(groups_text)
        )
        
    except Exception as e:
        logger.error(f"Error showing group list: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")

@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def delete_group_start(message: Message, state: FSMContext, telethon_client: TelegramClient):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏."""
    try:
        if not telethon_client:
            logger.error("Telethon client not found")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        db = Database("bot_database.db")
        groups = db.execute("SELECT * FROM groups").fetchall()
        
        if not groups:
            logger.warning("No groups stored in the database for deletion")
            await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥—Ä—É–ø–ø—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ª–æ–≥–∏–∫–æ–π –≤—ã–±–æ—Ä–∞
        formatted_groups = [{
            "id": group[0],
            "title": group[1],
            "username": group[2]
        } for group in groups]
            
        await state.update_data(found_groups=formatted_groups)
        
        builder = InlineKeyboardBuilder()
        for i, group in enumerate(formatted_groups):
            username_part = f"(@{group['username']})" if group['username'] else "(–±–µ–∑ username)"
            builder.button(
                text=f"‚¨úÔ∏è {group['title']} {username_part}",
                callback_data=f"delete_group_select_{i}"
            )
        
        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="delete_group_select_all")
        builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="delete_group_deselect_all")
        builder.button(text="üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="delete_group_confirm")
        
        builder.adjust(1)
        
        await message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        
        await state.set_state(BotStates.deleting_groups)
        await state.update_data(selected_groups=[])
        
    except Exception as e:
        logger.error(f"Error showing groups for deletion: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")

@router.callback_query(lambda c: c.data.startswith("delete_group_select_") or c.data in ["delete_group_select_all", "delete_group_deselect_all"])
async def toggle_group_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    try:
        callback_data = callback.data
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])
        selected_groups = state_data.get("selected_groups", [])

        if callback_data == "delete_group_select_all":
            # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
            selected_groups = list(range(len(found_groups)))
            await callback.answer("–í—Å–µ –≥—Ä—É–ø–ø—ã –≤—ã–±—Ä–∞–Ω—ã")
        elif callback_data == "delete_group_deselect_all":
            # –°–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
            selected_groups = []
            await callback.answer("–í—ã–±–æ—Ä —Å–Ω—è—Ç")
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
            index = int(callback_data.split("_")[3])
            if index in selected_groups:
                selected_groups.remove(index)
            else:
                selected_groups.append(index)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(selected_groups=selected_groups)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        for i, group in enumerate(found_groups):
            checkbox = "‚úÖ" if i in selected_groups else "‚¨úÔ∏è"
            username_part = f"(@{group['username']})" if group['username'] else "(–±–µ–∑ username)"
            builder.button(
                text=f"{checkbox} {group['title']} {username_part}",
                callback_data=f"delete_group_select_{i}"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="delete_group_select_all")
        builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="delete_group_deselect_all")
        builder.button(text="üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data="delete_group_confirm")

        builder.adjust(1)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã")

@router.callback_query(lambda c: c.data == "delete_group_confirm")
async def handle_confirm_deletion(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø."""
    try:
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])
        selected_groups = state_data.get("selected_groups", [])
        
        if not selected_groups:
            await callback.answer("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã")
            return
        
        db = Database("bot_database.db")
        deleted_count = 0
        
        for index in selected_groups:
            group = found_groups[index]
            db.execute("DELETE FROM groups WHERE id = ?", (group['id'],))
            deleted_count += 1
        
        db.commit()
        
        await callback.message.edit_text(
            f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –≥—Ä—É–ø–ø: {deleted_count}\n\n"
            f"üóëÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã."
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error deleting groups: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø")

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –≤—Ä—É—á–Ω—É—é")
async def add_group_manually(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –≤—Ä—É—á–Ω—É—é."""
    example_message = (
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
        "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ https://t.me/group_name\n"
        "‚Ä¢ t.me/group_name\n"
        "‚Ä¢ @group_name\n"
        "‚Ä¢ group_name\n\n"
        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ https://t.me/+AbCdEf123456\n"
        "‚Ä¢ https://t.me/joinchat/AbCdEf123456\n"
        "‚Ä¢ +AbCdEf123456\n\n"
        "‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω–æ–π –∏ –∏–º–µ—Ç—å username"
    )
    await message.answer(example_message)
    await state.set_state(BotStates.waiting_for_group_name)

@router.message(BotStates.waiting_for_group_name)
async def process_group_name(message: Message, state: FSMContext, telethon_client: TelegramClient):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ username –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."""
    try:
        if not telethon_client:
            logger.error("Telethon client not found")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        group_username = message.text.strip()
        if 't.me/' in group_username:
            group_username = group_username.split('t.me/')[-1]
        elif '@' in group_username:
            group_username = group_username.lstrip('@')
            
        try:
            group_entity = await telethon_client.get_entity(f"t.me/{group_username}")
            
            db = Database("bot_database.db")
            db.execute(
                "INSERT OR IGNORE INTO groups (id, name, username) VALUES (?, ?, ?)",
                (group_entity.id, group_entity.title, group_username)
            )
            db.commit()
            
            await message.answer(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üì± –ù–∞–∑–≤–∞–Ω–∏–µ: {group_entity.title}\n"
                f"üîó Username: @{group_username}\n"
                f"üÜî ID: {group_entity.id}"
            )
            
        except Exception as e:
            logger.error(f"Error adding group manually: {e}")
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:\n"
                f"{str(e)}\n\n"
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                f"‚Ä¢ –ì—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                f"‚Ä¢ –ì—Ä—É–ø–ø–∞ –ø—É–±–ª–∏—á–Ω–∞—è\n"
                f"‚Ä¢ –£–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username"
            )
            
    except Exception as e:
        logger.error(f"Error processing group username: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()