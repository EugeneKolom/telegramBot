import asyncio
from aiogram import Router, F
from telethon.sync import TelegramClient
from telethon.tl.types import InputPeerEmpty, Chat, Channel
from telethon.tl.functions.messages import SearchGlobalRequest
from telethon.tl.functions.contacts import SearchRequest
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states.states import BotStates
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db import Database
from telethon.tl.functions.channels import GetFullChannelRequest

router = Router()

async def global_search(client: TelegramClient, keywords: list[str]):
    """–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ Telegram"""
    results = []
    for keyword in keywords:
        print(f"üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: {keyword}")
        try:
            search_result = await client(SearchRequest(
                q=keyword,
                limit=100
            ))
            
            print(f"–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è '{keyword}'")
            
            if hasattr(search_result, 'chats'):
                print(f"–ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: {len(search_result.chats)}")
                for chat in search_result.chats:
                    if hasattr(chat, 'username') and chat.username:
                        group_data = {
                            "id": chat.id,
                            "title": chat.title,
                            "username": chat.username
                        }
                        if group_data not in results:
                            results.append(group_data)
                            print(f"–ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_data['title']} (@{group_data['username']})")

            await asyncio.sleep(2)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
            print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            continue

    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø: {len(results)}")
    return results

@router.message(BotStates.waiting_for_keywords)
async def search_groups_handler(message: Message, state: FSMContext, telethon_client=None):
    try:
        if not telethon_client:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        keywords = [k.strip() for k in message.text.split(',')]
        await message.answer(f"üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≥—Ä—É–ø–ø –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {keywords}")

        groups = await global_search(telethon_client, keywords)

        if not groups:
            await message.answer("‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return

        await state.update_data(found_groups=groups)
        
        builder = InlineKeyboardBuilder()
        for i, group in enumerate(groups):
            username_part = f"(@{group['username']})" if group['username'] else "(–±–µ–∑ username)"
            builder.button(
                text=f"‚¨úÔ∏è {group['title']} {username_part}",
                callback_data=f"select_group_{i}"
            )
        
        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all")
        builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="deselect_all")
        builder.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="save_selected")
        
        builder.adjust(1)
        
        await message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        
        await state.set_state(BotStates.selecting_groups)
        await state.update_data(selected_groups=[])

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥—Ä—É–ø–ø: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
        await state.clear()

@router.message(F.text == "üîç –ü–∞—Ä—Å–∏—Ç—å –≥—Ä—É–ø–ø—ã")
async def text_parse_groups(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    await state.set_state(BotStates.waiting_for_keywords)

@router.callback_query(lambda c: c.data.startswith("select_group_"))
async def toggle_group_selection(callback: CallbackQuery, state: FSMContext):
    try:
        group_index = int(callback.data.split("_")[2])
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])
        selected_groups = state_data.get("selected_groups", [])

        if group_index < len(found_groups):
            group = found_groups[group_index]
            if group_index in selected_groups:
                selected_groups.remove(group_index)
                checkbox = "‚¨úÔ∏è"
            else:
                selected_groups.append(group_index)
                checkbox = "‚úÖ"

            await state.update_data(selected_groups=selected_groups)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            username_part = f"(@{group['username']})" if group['username'] else "(–±–µ–∑ username)"
            builder = InlineKeyboardBuilder()
            
            # –í–æ—Å—Å–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
            for i, g in enumerate(found_groups):
                is_selected = i in selected_groups
                u_part = f"(@{g['username']})" if g['username'] else "(–±–µ–∑ username)"
                builder.button(
                    text=f"{'‚úÖ' if is_selected else '‚¨úÔ∏è'} {g['title']} {u_part}",
                    callback_data=f"select_group_{i}"
                )

            builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all")
            builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="deselect_all")
            builder.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="save_selected")
            
            builder.adjust(1)

            await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
            await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã")

@router.callback_query(lambda c: c.data == "select_all")
async def handle_select_all(callback: CallbackQuery, state: FSMContext):
    try:
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])
        selected_groups = list(range(len(found_groups)))
        await state.update_data(selected_groups=selected_groups)

        builder = InlineKeyboardBuilder()
        for i, group in enumerate(found_groups):
            username_part = f"(@{group['username']})" if group['username'] else "(–±–µ–∑ username)"
            builder.button(
                text=f"‚úÖ {group['title']} {username_part}",
                callback_data=f"select_group_{i}"
            )

        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all")
        builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="deselect_all")
        builder.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="save_selected")
        
        builder.adjust(1)

        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        await callback.answer("–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –≥—Ä—É–ø–ø—ã")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø")

@router.callback_query(lambda c: c.data == "deselect_all")
async def handle_deselect_all(callback: CallbackQuery, state: FSMContext):
    try:
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])
        await state.update_data(selected_groups=[])

        builder = InlineKeyboardBuilder()
        for i, group in enumerate(found_groups):
            username_part = f"(@{group['username']})" if group['username'] else "(–±–µ–∑ username)"
            builder.button(
                text=f"‚¨úÔ∏è {group['title']} {username_part}",
                callback_data=f"select_group_{i}"
            )

        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all")
        builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="deselect_all")
        builder.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="save_selected")
        
        builder.adjust(1)

        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        await callback.answer("–í—ã–±–æ—Ä –≤—Å–µ—Ö –≥—Ä—É–ø–ø —Å–Ω—è—Ç")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –≤—ã–±–æ—Ä–∞")

@router.callback_query(lambda c: c.data == "save_selected")
async def save_selected_groups(callback: CallbackQuery, state: FSMContext):
    try:
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])
        selected_indices = state_data.get("selected_groups", [])
        
        if not selected_indices:
            await callback.answer("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã")
            return
            
        selected_groups = [found_groups[i] for i in selected_indices]
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø: {selected_groups}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = Database("bot_database.db")
        for group in selected_groups:
            try:
                db.execute(
                    "INSERT OR IGNORE INTO groups (id, name, username) VALUES (?, ?, ?)",
                    (group['id'], group['title'], group['username'])
                )
                db.commit()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã {group['title']}: {e}")
        
        await callback.answer("‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        await callback.message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(selected_groups)} –≥—Ä—É–ø–ø")
        await state.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø")

@router.message(F.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–ø–ø—ã")
async def view_groups(message: Message, telethon_client=None):
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ view_groups –≤—ã–∑–≤–∞–Ω")
    try:
        if not telethon_client:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        db = Database("bot_database.db")
        cursor = db.execute("""
            SELECT 
                g.id,
                g.name,
                g.username,
                (SELECT COUNT(*) FROM contacts WHERE group_id = g.id) as parsed_users,
                (SELECT COUNT(*) FROM invites WHERE group_id = g.id AND status = 'success') as invited_users
            FROM groups g
        """)
        groups = cursor.fetchall()
        
        if not groups:
            await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
            return
            
        groups_text = []
        
        for group in groups:
            parsed_users = group[3] if group[3] is not None else 0
            invited_users = group[4] if group[4] is not None else 0
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Telethon
                group_entity = await telethon_client.get_entity(f"t.me/{group[2]}")
                full_chat = await telethon_client(GetFullChannelRequest(group_entity))
                participants_count = full_chat.full_chat.participants_count
                
                groups_text.append(
                    f"üì± {group[1]} (@{group[2]})\n"
                    f"üë• ID: {group[0]}\n"
                    f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {participants_count}\n"
                    f"üì• –°–ø–∞—Ä—Å–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {parsed_users}\n"
                    f"üì® –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited_users}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ {group[2]}: {e}")
                groups_text.append(
                    f"üì± {group[1]} (@{group[2]})\n"
                    f"üë• ID: {group[0]}\n"
                    f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                    f"üì• –°–ø–∞—Ä—Å–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {parsed_users}\n"
                    f"üì® –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited_users}"
                )

        await message.answer(
            "üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:\n\n" + "\n\n".join(groups_text)
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")

@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def delete_group_start(message: Message, state: FSMContext, telethon_client=None):
    try:
        if not telethon_client:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        db = Database("bot_database.db")
        cursor = db.execute("SELECT * FROM groups")
        groups = cursor.fetchall()
        
        if not groups:
            await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
            return
            
        builder = InlineKeyboardBuilder()
        for group in groups:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ Telethon
                group_entity = await telethon_client.get_entity(f"t.me/{group[2]}")
                full_chat = await telethon_client(GetFullChannelRequest(group_entity))
                participants_count = full_chat.full_chat.participants_count
                builder.button(
                    text=f"‚ùå {group[1]} (@{group[2]}) | ID: {group[0]} | üë• {participants_count}",
                    callback_data=f"delete_group_{group[0]}"
                )
            except Exception as e:
                builder.button(
                    text=f"‚ùå {group[1]} (@{group[2]}) | ID: {group[0]} | ‚ùå –û—à–∏–±–∫–∞",
                    callback_data=f"delete_group_{group[0]}"
                )
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ {group[2]}: {e}")

        builder.adjust(1)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")

@router.callback_query(lambda c: c.data.startswith("delete_group_"))
async def delete_group_callback(callback: CallbackQuery):
    try:
        group_id = int(callback.data.split("_")[2])
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Database("bot_database.db")
        
        # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É
        db.execute("DELETE FROM groups WHERE id = ?", (group_id,))
        db.commit()
        
        await callback.answer("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        await callback.message.edit_text("–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã")

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –≤—Ä—É—á–Ω—É—é")
async def add_group_manually(message: Message, state: FSMContext):
    example_message = (
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
        "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ https://t.me/group_name\n"
        "‚Ä¢ t.me/group_name\n"
        "‚Ä¢ @group_name\n"
        "‚Ä¢ group_name\n\n"
        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ https://t.me/+AbCdEf123456\n"
        "‚Ä¢ https://t.me/joinchat/AbCdEf123456\n"
        "‚Ä¢ +AbCdEf123456\n\n"
        "‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω–æ–π –∏ –∏–º–µ—Ç—å username"
    )
    await message.answer(example_message)
    await state.set_state(BotStates.waiting_for_group_name)

@router.message(BotStates.waiting_for_group_name)
async def process_group_name(message: Message, state: FSMContext, telethon_client=None):
    try:
        if not telethon_client:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        group_username = message.text.strip()
        
        # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –æ—Ç –ª–∏—à–Ω–µ–≥–æ
        if 't.me/' in group_username:
            group_username = group_username.split('t.me/')[-1]
        elif '@' in group_username:
            group_username = group_username.lstrip('@')
            
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group_entity = await telethon_client.get_entity(f"t.me/{group_username}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É –≤ –±–∞–∑—É
            db = Database("bot_database.db")
            db.execute(
                "INSERT OR IGNORE INTO groups (id, name, username) VALUES (?, ?, ?)",
                (group_entity.id, group_entity.title, group_username)
            )
            db.commit()
            
            await message.answer(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üì± –ù–∞–∑–≤–∞–Ω–∏–µ: {group_entity.title}\n"
                f"üîó Username: @{group_username}\n"
                f"üÜî ID: {group_entity.id}"
            )
            
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:\n"
                f"{str(e)}\n\n"
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                f"‚Ä¢ –ì—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                f"‚Ä¢ –ì—Ä—É–ø–ø–∞ –ø—É–±–ª–∏—á–Ω–∞—è\n"
                f"‚Ä¢ –£–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username"
            )
            
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()
