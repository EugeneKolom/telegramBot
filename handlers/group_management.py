from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states.states import BotStates
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db import Database
from telethon import TelegramClient
from telethon.tl.functions.channels import GetFullChannelRequest

router = Router()

@router.callback_query(lambda c: c.data == "save_selected")
async def save_selected_groups(callback: CallbackQuery, state: FSMContext):
    try:
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])
        selected_indices = state_data.get("selected_groups", [])
        
        if not selected_indices:
            await callback.answer("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã")
            return
            
        selected_groups = [found_groups[i] for i in selected_indices]
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø: {selected_groups}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = Database("bot_database.db")
        saved_count = 0
        already_exists = 0
        
        for group in selected_groups:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ –≤ –±–∞–∑–µ
                cursor = db.execute("SELECT id FROM groups WHERE username = ?", (group['username'],))
                existing_group = cursor.fetchone()
                
                if existing_group:
                    already_exists += 1
                    continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                db.execute(
                    "INSERT INTO groups (id, name, username) VALUES (?, ?, ?)",
                    (group['id'], group['title'], group['username'])
                )
                saved_count += 1
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã {group['title']}: {e}")
                continue
        
        db.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        result_message = (
            f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:\n\n"
            f"üì• –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø: {saved_count}\n"
            f"üìù –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {already_exists}\n"
            f"üìä –í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ: {len(selected_indices)}"
        )
        
        await callback.message.edit_text(result_message)
        await state.clear()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø")
        await state.clear()

@router.message(F.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–ø–ø—ã")
async def view_groups(message: Message, telethon_client=None):
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ view_groups –≤—ã–∑–≤–∞–Ω")
    try:
        if not telethon_client:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        db = Database("bot_database.db")
        cursor = db.execute("""
            SELECT 
                g.id,
                g.name,
                g.username,
                (SELECT COUNT(*) FROM contacts WHERE group_id = g.id) as parsed_users,
                (SELECT COUNT(*) FROM invites WHERE group_id = g.id AND status = 'success') as invited_users
            FROM groups g
        """)
        groups = cursor.fetchall()
        
        if not groups:
            await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
            return
            
        groups_text = []
        
        for group in groups:
            parsed_users = group[3] if group[3] is not None else 0
            invited_users = group[4] if group[4] is not None else 0
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Telethon
                group_entity = await telethon_client.get_entity(f"t.me/{group[2]}")
                full_chat = await telethon_client(GetFullChannelRequest(group_entity))
                participants_count = full_chat.full_chat.participants_count
                
                groups_text.append(
                    f"üì± {group[1]} (@{group[2]})\n"
                    f"üë• ID: {group[0]}\n"
                    f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {participants_count}\n"
                    f"üì• –°–ø–∞—Ä—Å–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {parsed_users}\n"
                    f"üì® –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited_users}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ {group[2]}: {e}")
                groups_text.append(
                    f"üì± {group[1]} (@{group[2]})\n"
                    f"üë• ID: {group[0]}\n"
                    f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                    f"üì• –°–ø–∞—Ä—Å–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {parsed_users}\n"
                    f"üì® –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited_users}"
                )

        await message.answer(
            "üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:\n\n" + "\n\n".join(groups_text)
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")

@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def delete_group_start(message: Message, state: FSMContext, telethon_client=None):
    try:
        if not telethon_client:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        db = Database("bot_database.db")
        cursor = db.execute("SELECT * FROM groups")
        groups = cursor.fetchall()
        
        if not groups:
            await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
            return
            
        builder = InlineKeyboardBuilder()
        for group in groups:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ Telethon
                group_entity = await telethon_client.get_entity(f"t.me/{group[2]}")
                full_chat = await telethon_client(GetFullChannelRequest(group_entity))
                participants_count = full_chat.full_chat.participants_count
                builder.button(
                    text=f"‚ùå {group[1]} (@{group[2]}) | ID: {group[0]} | üë• {participants_count}",
                    callback_data=f"delete_group_{group[0]}"
                )
            except Exception as e:
                builder.button(
                    text=f"‚ùå {group[1]} (@{group[2]}) | ID: {group[0]} | ‚ùå –û—à–∏–±–∫–∞",
                    callback_data=f"delete_group_{group[0]}"
                )
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ {group[2]}: {e}")

        builder.adjust(1)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")

@router.callback_query(lambda c: c.data.startswith("delete_group_"))
async def delete_group_callback(callback: CallbackQuery):
    try:
        group_id = int(callback.data.split("_")[2])
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Database("bot_database.db")
        
        # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É
        db.execute("DELETE FROM groups WHERE id = ?", (group_id,))
        db.commit()
        
        await callback.answer("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        await callback.message.edit_text("–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã")

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –≤—Ä—É—á–Ω—É—é")
async def add_group_manually(message: Message, state: FSMContext):
    example_message = (
        "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
        "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ https://t.me/group_name\n"
        "‚Ä¢ t.me/group_name\n"
        "‚Ä¢ @group_name\n"
        "‚Ä¢ group_name\n\n"
        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ https://t.me/+AbCdEf123456\n"
        "‚Ä¢ https://t.me/joinchat/AbCdEf123456\n"
        "‚Ä¢ +AbCdEf123456\n\n"
        "‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω–æ–π –∏ –∏–º–µ—Ç—å username"
    )
    await message.answer(example_message)
    await state.set_state(BotStates.waiting_for_group_name)

@router.message(BotStates.waiting_for_group_name)
async def process_group_name(message: Message, state: FSMContext, telethon_client=None):
    try:
        if not telethon_client:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        group_username = message.text.strip()
        
        # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –æ—Ç –ª–∏—à–Ω–µ–≥–æ
        if 't.me/' in group_username:
            group_username = group_username.split('t.me/')[-1]
        elif '@' in group_username:
            group_username = group_username.lstrip('@')
            
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group_entity = await telethon_client.get_entity(f"t.me/{group_username}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É –≤ –±–∞–∑—É
            db = Database("bot_database.db")
            db.execute(
                "INSERT OR IGNORE INTO groups (id, name, username) VALUES (?, ?, ?)",
                (group_entity.id, group_entity.title, group_username)
            )
            db.commit()
            
            await message.answer(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üì± –ù–∞–∑–≤–∞–Ω–∏–µ: {group_entity.title}\n"
                f"üîó Username: @{group_username}\n"
                f"üÜî ID: {group_entity.id}"
            )
            
        except Exception as e:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:\n"
                f"{str(e)}\n\n"
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                f"‚Ä¢ –ì—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                f"‚Ä¢ –ì—Ä—É–ø–ø–∞ –ø—É–±–ª–∏—á–Ω–∞—è\n"
                f"‚Ä¢ –£–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username"
            )
            
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()