import asyncio
import logging
from aiogram import Router, F
from telethon.sync import TelegramClient
from telethon.tl.functions.contacts import SearchRequest
from telethon.tl.functions.channels import GetFullChannelRequest
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states.states import BotStates
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db import Database
from aiogram.exceptions import TelegramBadRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = Router()

async def is_comments_enabled(client: TelegramClient, chat) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ."""
    try:
        full_chat = await client(GetFullChannelRequest(chat))
        is_enabled = full_chat.full_chat.comments_enabled
        logger.debug(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ {chat.title} ({chat.id}) {'–≤–∫–ª—é—á–µ–Ω—ã' if is_enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")
        return is_enabled
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∫–∞–Ω–∞–ª–µ {chat}: {e}", exc_info=True)
        return False

async def has_user_messages(client: TelegramClient, chat) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        user_messages = False
        async for message in client.iter_messages(chat, limit=10):
            if message.sender and not message.sender.bot:
                user_messages = True
                break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.debug(f"–ù–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–µ {chat.title} ({chat.id}): {'–µ—Å—Ç—å' if user_messages else '–Ω–µ—Ç'}")
        return user_messages
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ {chat}: {e}", exc_info=True)
        return False

async def global_search(client: TelegramClient, keywords: list[str]) -> list[dict]:
    """–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ Telegram —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π."""
    results = []
    unique_groups = set()  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø
    total_keywords = len(keywords)
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ {total_keywords} –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.")

    for i, keyword in enumerate(keywords):
        logger.info(f"[{i+1}/{total_keywords}] üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: {keyword}")
        try:
            search_result = await client(SearchRequest(
                q=keyword,
                limit=100
            ))

            chats = search_result.chats if hasattr(search_result, 'chats') else []
            num_chats = len(chats)
            logger.info(f"[{i+1}/{total_keywords}] –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è '{keyword}'. –ù–∞–π–¥–µ–Ω–æ {num_chats} —á–∞—Ç–æ–≤.")

            for j, chat in enumerate(chats):
                if hasattr(chat, 'username') and chat.username:
                    logger.debug(f"[{i+1}/{total_keywords}] [{j+1}/{num_chats}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞: {chat.title} (@{chat.username})")

                    comments_enabled = await is_comments_enabled(client, chat)
                    has_messages = await has_user_messages(client, chat)

                    if comments_enabled or has_messages:
                        group_data = (chat.id, chat.title, chat.username)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                        if group_data not in unique_groups:
                            unique_groups.add(group_data)
                            group_info = {
                                "id": chat.id,
                                "title": chat.title,
                                "username": chat.username,
                                "comments_enabled": comments_enabled,
                                "has_user_messages": has_messages
                            }
                            results.append(group_info)
                            logger.info(f"[{i+1}/{total_keywords}] [{j+1}/{num_chats}]  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {chat.title} (@{chat.username}), ID: {chat.id}")
                        else:
                             logger.debug(f"[{i+1}/{total_keywords}] [{j+1}/{num_chats}] –ì—Ä—É–ø–ø–∞ {chat.title} (@{chat.username}), ID: {chat.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ unique_groups, –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                    else:
                        logger.debug(f"[{i+1}/{total_keywords}] [{j+1}/{num_chats}] –ì—Ä—É–ø–ø–∞ {chat.title} (@{chat.username}), ID: {chat.id} –ø—Ä–æ–ø—É—â–µ–Ω–∞, —Ç.–∫. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                else:
                     logger.warning(f"[{i+1}/{total_keywords}] [{j+1}/{num_chats}] –ß–∞—Ç {chat.title} ({chat.id}) –ø—Ä–æ–ø—É—â–µ–Ω, –Ω–µ—Ç username.")

        except Exception as e:
            logger.error(f"[{i+1}/{total_keywords}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ '{keyword}': {str(e)}", exc_info=True)

    total_found = len(results)
    logger.info(f"–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø: {total_found}")
    return results


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Aiogram ---

@router.message(F.text == " –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø")
async def text_parse_groups(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø'."""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    await state.set_state(BotStates.waiting_for_keywords)


@router.message(BotStates.waiting_for_keywords)
async def search_groups_handler(message: Message, state: FSMContext, telethon_client: TelegramClient = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."""
    try:
        if not telethon_client:
            await message.answer(" –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        keywords = [k.strip() for k in message.text.split(',')]
        await message.answer(f"üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≥—Ä—É–ø–ø –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {keywords}")

        groups = await global_search(telethon_client, keywords)

        if not groups:
            await message.answer("‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return

        await state.update_data(found_groups=groups)

        builder = InlineKeyboardBuilder()
        for i, group in enumerate(groups):
            username_part = f"(@{group['username']})" if group['username'] else "(–±–µ–∑ username)"
            comments_info = "üí¨" if group['comments_enabled'] else ""
            messages_info = "üì®" if group['has_user_messages'] else ""
            builder.button(
                text=f"‚¨úÔ∏è {group['title']} {username_part} {comments_info} {messages_info}",
                callback_data=f"select_group_{i}"
            )

        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all")
        builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="deselect_all")
        builder.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="save_selected")

        builder.adjust(1)

        await message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )

        await state.set_state(BotStates.selecting_groups)
        await state.update_data(selected_groups=[])

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥—Ä—É–ø–ø: {e}", exc_info=True)
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
        await state.clear()


@router.callback_query(lambda c: c.data.startswith("select_group_"))
async def toggle_group_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã."""
    try:
        index = int(callback.data.split("_")[2])
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])
        selected_groups = state_data.get("selected_groups", [])

        if index in selected_groups:
            selected_groups.remove(index)
        else:
            selected_groups.append(index)

        await state.update_data(selected_groups=selected_groups)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        for i, group in enumerate(found_groups):
            checkbox = "‚úÖ" if i in selected_groups else "‚¨úÔ∏è"
            username_part = f"(@{group['username']})" if group['username'] else "(–±–µ–∑ username)"
            comments_info = "üí¨" if group['comments_enabled'] else ""
            messages_info = "üì®" if group['has_user_messages'] else ""
            builder.button(
                text=f"{checkbox} {group['title']} {username_part} {comments_info} {messages_info}",
                callback_data=f"select_group_{i}"
            )

        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all")
        builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="deselect_all")
        builder.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="save_selected")

        builder.adjust(1)

        await callback.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )

    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            logger.warning(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback –∑–∞–ø—Ä–æ—Å: {e}")
            await callback.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ.") #–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã: {e}", exc_info=True)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã")


@router.callback_query(lambda c: c.data == "select_all")
async def handle_select_all(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø."""
    try:
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])

        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
        selected_groups = list(range(len(found_groups)))
        await state.update_data(selected_groups=selected_groups)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        for i, group in enumerate(found_groups):
            username_part = f"(@{group['username']})" if group['username'] else "(–±–µ–∑ username)"
            comments_info = "üí¨" if group['comments_enabled'] else ""
            messages_info = "üì®" if group['has_user_messages'] else ""
            builder.button(
                text=f"‚úÖ {group['title']} {username_part} {comments_info} {messages_info}",
                callback_data=f"select_group_{i}"
            )

        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all")
        builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="deselect_all")
        builder.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="save_selected")

        builder.adjust(1)

        await callback.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø")


@router.callback_query(lambda c: c.data == "deselect_all")
async def handle_deselect_all(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è –≤—ã–±–æ—Ä–∞ —Å–æ –≤—Å–µ—Ö –≥—Ä—É–ø–ø."""
    try:
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])

        # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
        await state.update_data(selected_groups=[])

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        for i, group in enumerate(found_groups):
            username_part = f"(@{group['username']})" if group['username'] else "(–±–µ–∑ username)"
            comments_info = "üí¨" if group['comments_enabled'] else ""
            messages_info = "üì®" if group['has_user_messages'] else ""
            builder.button(
                text=f"‚¨úÔ∏è {group['title']} {username_part} {comments_info} {messages_info}",
                callback_data=f"select_group_{i}"
            )

        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all")
        builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="deselect_all")
        builder.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="save_selected")

        builder.adjust(1)

        await callback.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –≤—ã–±–æ—Ä–∞: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –≤—ã–±–æ—Ä–∞")


@router.callback_query(lambda c: c.data == "save_selected")
async def save_selected_groups(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø."""
    try:
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])
        selected_indices = state_data.get("selected_groups", [])

        if not selected_indices:
            await callback.answer("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã")
            return

        selected_groups = [found_groups[i] for i in selected_indices]
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø: {selected_groups}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = Database("bot_database.db") #  –ü–æ–ª—É—á–∏—Ç–µ –ø—É—Ç—å –∫ –ë–î –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –∞ –Ω–µ —Ö–∞—Ä–¥–∫–æ–¥–æ–º
        saved_count = 0
        already_exists = 0

        for group in selected_groups:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ –≤ –±–∞–∑–µ
                cursor = db.execute("SELECT id FROM groups WHERE username = ?", (group['username'],))
                existing_group = cursor.fetchone()

                if existing_group:
                    already_exists += 1
                    continue

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                db.execute(
                    "INSERT INTO groups (id, name, username) VALUES (?, ?, ?)",
                    (group['id'], group['title'], group['username'])
                )
                saved_count += 1

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã {group['title']}: {e}", exc_info=True)
                continue

        db.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        result_message = (
            f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:\n\n"
            f"üì• –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø: {saved_count}\n"
            f"üìù –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {already_exists}\n"
            f"üìä –í—Å–µ–≥–æ –≤—ã–±—Ä–∞–Ω–æ: {len(selected_indices)}"
        )

        await callback.message.edit_text(result_message)
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø")
        await state.clear()