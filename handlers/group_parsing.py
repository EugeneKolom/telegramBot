import asyncio
from aiogram import Router, F
from telethon.sync import TelegramClient
from telethon.tl.functions.contacts import SearchRequest
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states.states import BotStates
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()

async def global_search(client: TelegramClient, keywords: list[str]):
    """–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ Telegram"""
    results = []
    for keyword in keywords:
        print(f"üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: {keyword}")
        try:
            search_result = await client(SearchRequest(
                q=keyword,
                limit=100
            ))
            
            print(f"–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –¥–ª—è '{keyword}'")
            
            if hasattr(search_result, 'chats'):
                print(f"–ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: {len(search_result.chats)}")
                for chat in search_result.chats:
                    if hasattr(chat, 'username') and chat.username:
                        group_data = {
                            "id": chat.id,
                            "title": chat.title,
                            "username": chat.username
                        }
                        if group_data not in results:
                            results.append(group_data)
                            print(f"–ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_data['title']} (@{group_data['username']})")

            await asyncio.sleep(2)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
            continue

    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø: {len(results)}")
    return results

@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø")
async def text_parse_groups(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    await state.set_state(BotStates.waiting_for_keywords)

@router.message(BotStates.waiting_for_keywords)
async def search_groups_handler(message: Message, state: FSMContext, telethon_client=None):
    try:
        if not telethon_client:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        keywords = [k.strip() for k in message.text.split(',')]
        await message.answer(f"üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≥—Ä—É–ø–ø –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {keywords}")

        groups = await global_search(telethon_client, keywords)

        if not groups:
            await message.answer("‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return

        await state.update_data(found_groups=groups)
        
        builder = InlineKeyboardBuilder()
        for i, group in enumerate(groups):
            username_part = f"(@{group['username']})" if group['username'] else "(–±–µ–∑ username)"
            builder.button(
                text=f"‚¨úÔ∏è {group['title']} {username_part}",
                callback_data=f"select_group_{i}"
            )
        
        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all")
        builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="deselect_all")
        builder.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="save_selected")
        
        builder.adjust(1)
        
        await message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        
        await state.set_state(BotStates.selecting_groups)
        await state.update_data(selected_groups=[])

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥—Ä—É–ø–ø: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
        await state.clear()

@router.callback_query(lambda c: c.data.startswith("select_group_"))
async def toggle_group_selection(callback: CallbackQuery, state: FSMContext):
    try:
        index = int(callback.data.split("_")[2])
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])
        selected_groups = state_data.get("selected_groups", [])
        
        if index in selected_groups:
            selected_groups.remove(index)
        else:
            selected_groups.append(index)
            
        await state.update_data(selected_groups=selected_groups)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        for i, group in enumerate(found_groups):
            checkbox = "‚úÖ" if i in selected_groups else "‚¨úÔ∏è"
            username_part = f"(@{group['username']})" if group['username'] else "(–±–µ–∑ username)"
            builder.button(
                text=f"{checkbox} {group['title']} {username_part}",
                callback_data=f"select_group_{i}"
            )
        
        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all")
        builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="deselect_all")
        builder.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="save_selected")
        
        builder.adjust(1)
        
        await callback.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã")

@router.callback_query(lambda c: c.data == "select_all")
async def handle_select_all(callback: CallbackQuery, state: FSMContext):
    try:
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])
        
        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
        selected_groups = list(range(len(found_groups)))
        await state.update_data(selected_groups=selected_groups)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        for i, group in enumerate(found_groups):
            username_part = f"(@{group['username']})" if group['username'] else "(–±–µ–∑ username)"
            builder.button(
                text=f"‚úÖ {group['title']} {username_part}",
                callback_data=f"select_group_{i}"
            )
        
        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all")
        builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="deselect_all")
        builder.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="save_selected")
        
        builder.adjust(1)
        
        await callback.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø")

@router.callback_query(lambda c: c.data == "deselect_all")
async def handle_deselect_all(callback: CallbackQuery, state: FSMContext):
    try:
        state_data = await state.get_data()
        found_groups = state_data.get("found_groups", [])
        
        # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
        await state.update_data(selected_groups=[])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        for i, group in enumerate(found_groups):
            username_part = f"(@{group['username']})" if group['username'] else "(–±–µ–∑ username)"
            builder.button(
                text=f"‚¨úÔ∏è {group['title']} {username_part}",
                callback_data=f"select_group_{i}"
            )
        
        builder.button(text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="select_all")
        builder.button(text="‚ùå –°–Ω—è—Ç—å –≤—ã–±–æ—Ä", callback_data="deselect_all")
        builder.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ", callback_data="save_selected")
        
        builder.adjust(1)
        
        await callback.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –≤—ã–±–æ—Ä–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –≤—ã–±–æ—Ä–∞")