from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
import math
from states.states import BotStates
from database.db import Database
from config import DAILY_INVITE_LIMIT, INVITE_DELAY, DECLINE_WAIT_DAYS

router = Router()

@router.message(F.text == "üì® –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def text_invite_users(message: Message, state: FSMContext):
    try:
        db = Database()
        groups = db.execute("SELECT id, name, username FROM groups").fetchall()
        
        if not groups:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É")
            return
            
        response = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
        for group in groups:
            group_id, name, username = group
            response += f"ID: {group_id} | {name} (@{username})\n"
            
        await message.answer(response)
        await state.set_state(BotStates.waiting_for_invite_group_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")

async def invite_users_to_group(message: Message, group_id, users):
    try:
        client = message.bot.get("client")
        if not client or not client.is_connected():
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API")
            return
            
        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è...
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        raise

@router.message(BotStates.waiting_for_invite_group_id)
async def process_invite_group(message: Message, state: FSMContext):
    try:
        group_id = int(message.text)
        db = Database()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        group = db.execute(
            "SELECT username FROM groups WHERE id = ?",
            (group_id,)
        ).fetchone()
        
        if not group:
            await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        users = db.execute(
            "SELECT username FROM contacts WHERE group_id = ?",
            (group_id,)
        ).fetchall()
        
        if not users:
            await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É")
            await state.clear()
            return
            
        await message.answer(f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—É @{group[0]}...")
        
        # –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await invite_users_to_group(message, group_id, users)
        
        await message.answer("‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥—Ä—É–ø–ø—ã (—á–∏—Å–ª–æ)")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
        await state.clear()

async def get_invite_status(group_id):
    try:
        db = Database()
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().date()
        invites = db.execute("""
            SELECT COUNT(*) 
            FROM invites 
            WHERE group_id = ? 
            AND DATE(invite_date) = ?
        """, (group_id, today)).fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        decline_date = datetime.now() - timedelta(days=DECLINE_WAIT_DAYS)
        declined = db.execute("""
            SELECT COUNT(*) 
            FROM invites 
            WHERE group_id = ? 
            AND status = 'declined' 
            AND invite_date > ?
        """, (group_id, decline_date)).fetchone()[0]
        
        return {
            'daily_invites': invites,
            'remaining_invites': DAILY_INVITE_LIMIT - invites,
            'declined_invites': declined
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–∞–π—Ç–æ–≤: {e}")
        raise
