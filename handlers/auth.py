from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError
from ..states.states import BotStates

router = Router()

@router.message(F.text == "üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
async def start_auth(message: Message, state: FSMContext):
    await message.answer(
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +79001234567"
    )
    await state.set_state(BotStates.waiting_for_phone)

@router.message(BotStates.waiting_for_phone)
async def handle_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_name = f"user_{message.from_user.id}"
        client = TelegramClient(session_name, API_ID, API_HASH)
        await client.connect()
        
        await client.send_code_request(phone)
        await state.update_data(phone=phone)
        await state.set_state(BotStates.waiting_for_code)
        
        await message.answer(
            "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n"
            "–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ:"
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear() 