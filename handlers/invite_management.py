from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from database.db import Database
from telethon.tl.functions.channels import InviteToChannelRequest
from telethon.errors import FloodWaitError, UserPrivacyRestrictedError, UserNotMutualContactError
import asyncio
from config import INVITE_DELAY

router = Router()

@router.message(F.text == "üì® –†–∞—Å—Å—ã–ª–∫–∞ –∏–Ω–≤–∞–π—Ç–æ–≤")
async def start_invite_mailing(message: Message, state: FSMContext):
    try:
        db = Database("bot_database.db")
        cursor = db.execute("""
            SELECT 
                g.id,
                g.name,
                g.username,
                COUNT(DISTINCT c.username) as users_count
            FROM groups g
            LEFT JOIN contacts c ON g.id = c.group_id
            GROUP BY g.id
        """)
        groups = cursor.fetchall()
        
        if not groups:
            await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
            return
            
        builder = InlineKeyboardBuilder()
        for group in groups:
            users_count = group[3] or 0
            builder.button(
                text=f"üì® {group[1]} (@{group[2]}) | üë• {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                callback_data=f"invite_to_group_{group[0]}"
            )
        
        builder.adjust(1)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–Ω–≤–∞–π—Ç–æ–≤:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")

@router.callback_query(lambda c: c.data.startswith("invite_to_group_"))
async def handle_invite_to_group(callback: CallbackQuery, state: FSMContext, telethon_client=None):
    try:
        if not telethon_client:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        group_id = int(callback.data.split("_")[3])
        db = Database("bot_database.db")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        cursor = db.execute("SELECT * FROM groups WHERE id = ?", (group_id,))
        group = cursor.fetchone()
        if not group:
            await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        cursor = db.execute("""
            SELECT c.username 
            FROM contacts c
            LEFT JOIN invites i ON c.username = i.username AND c.group_id = i.group_id
            WHERE c.group_id = ? AND (i.status IS NULL OR i.status = 'failed')
            LIMIT 50
        """, (group_id,))
        users = cursor.fetchall()

        if not users:
            await callback.message.edit_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
            return

        status_message = await callback.message.edit_text(
            f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –∏–Ω–≤–∞–π—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø—É {group[1]}...\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {len(users)}"
        )

        success_count = 0
        error_count = 0
        
        try:
            group_entity = await telethon_client.get_entity(f"t.me/{group[2]}")
            
            for i, user in enumerate(users, 1):
                try:
                    user_entity = await telethon_client.get_entity(f"@{user[0]}")
                    await telethon_client(InviteToChannelRequest(group_entity, [user_entity]))
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                    db.execute(
                        "INSERT OR REPLACE INTO invites (username, group_id, status) VALUES (?, ?, ?)",
                        (user[0], group_id, 'success')
                    )
                    db.commit()
                    
                    success_count += 1
                    
                except (UserPrivacyRestrictedError, UserNotMutualContactError):
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                    db.execute(
                        "INSERT OR REPLACE INTO invites (username, group_id, status) VALUES (?, ?, ?)",
                        (user[0], group_id, 'failed')
                    )
                    db.commit()
                    error_count += 1
                    
                except FloodWaitError as e:
                    await status_message.edit_text(
                        f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π. –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥.\n\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {success_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {error_count}"
                    )
                    break
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[0]}: {e}")
                    error_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if i % 5 == 0:
                    await status_message.edit_text(
                        f"üîÑ –†–∞—Å—Å—ã–ª–∫–∞ –∏–Ω–≤–∞–π—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø—É {group[1]}...\n"
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {success_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(users)}"
                    )
                
                await asyncio.sleep(INVITE_DELAY)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_message.edit_text(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∏–Ω–≤–∞–π—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"üë• –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(users)}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {success_count}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {error_count}"
            )
            
        except Exception as e:
            await status_message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –∏–Ω–≤–∞–π—Ç–æ–≤:\n{str(e)}\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {success_count}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {error_count}"
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await callback.message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}") 