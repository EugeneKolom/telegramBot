from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states.states import BotStates
from database.db import Database
from aiogram.utils.keyboard import InlineKeyboardBuilder
from telethon.tl.functions.channels import (
    GetFullChannelRequest,
    GetParticipantsRequest,
    JoinChannelRequest,
    LeaveChannelRequest,
)
from telethon.tl.types import (
    ChannelParticipantsSearch,
    ChannelParticipantsRecent,
)
import asyncio

router = Router()


@router.message(F.text == "üë• –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def start_parse_users(message: Message, state: FSMContext, telethon_client=None):
    """
    –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    try:
        if not telethon_client:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        db = Database("bot_database.db")
        cursor = db.execute("SELECT * FROM groups")
        groups = cursor.fetchall()

        if not groups:
            await message.answer("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
            return

        builder = InlineKeyboardBuilder()
        for group in groups:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                group_entity = await telethon_client.get_entity(f"t.me/{group[2]}")
                full_chat = await telethon_client(GetFullChannelRequest(group_entity))
                participants_count = full_chat.full_chat.participants_count
                builder.button(
                    text=f"üë• {group[1]} (@{group[2]}) | {participants_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
                    callback_data=f"parse_users_{group[0]}",
                )
            except Exception as e:
                builder.button(
                    text=f"üë• {group[1]} (@{group[2]}) | –û—à–∏–±–∫–∞",
                    callback_data=f"parse_users_{group[0]}",
                )
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ {group[2]}: {e}")

        builder.adjust(1)

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            reply_markup=builder.as_markup(),
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥—Ä—É–ø–ø –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")


async def parse_all_users(client, entity, status_message):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã (–±–µ–∑ –±–æ—Ç–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤).
    """
    all_participants = []

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filters = [
        ChannelParticipantsSearch(''),  # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        ChannelParticipantsRecent(),    # –ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    ]

    for filter_type in filters:
        offset = 0
        limit = 200  # –õ–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å

        while True:
            try:
                participants = await client(GetParticipantsRequest(
                    channel=entity,
                    filter=filter_type,
                    offset=offset,
                    limit=limit,
                    hash=0
                ))

                if not participants.users:
                    break

                # –§–∏–ª—å—Ç—Ä—É–µ–º –±–æ—Ç–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                for user in participants.users:
                    if not user.bot and not getattr(user, 'admin_rights', None):
                        all_participants.append(user)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                await status_message.edit_text(
                    f"üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n"
                    f"–ù–∞–π–¥–µ–Ω–æ: {len(all_participants)}\n"
                    f"–§–∏–ª—å—Ç—Ä: {filter_type.__class__.__name__}"
                )

                offset += len(participants.users)
                await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º {filter_type.__class__.__name__}: {e}")
                continue

    return all_participants


@router.callback_query(lambda c: c.data.startswith("parse_users_"))
async def parse_users_callback(callback: CallbackQuery, telethon_client=None):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    try:
        if not telethon_client:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        group_id = int(callback.data.split("_")[2])
        db = Database("bot_database.db")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        cursor = db.execute("SELECT * FROM groups WHERE id = ?", (group_id,))
        group = cursor.fetchone()
        if not group:
            await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        await callback.message.edit_text(f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã {group[1]}...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
            group_entity = await telethon_client.get_entity(f"t.me/{group[2]}")
            participants = await parse_all_users(telethon_client, group_entity, callback.message)

            # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_users = len(participants)
            saved_users = 0

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            for participant in participants:
                if participant.username:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å username
                    try:
                        db.execute(
                            "INSERT OR IGNORE INTO contacts (username, group_id) VALUES (?, ?)",
                            (participant.username, group_id),
                        )
                        saved_users += 1
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {participant.username}: {e}")

            db.commit()

            if saved_users == 0:
                error_message = (
                    f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è!\n\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                    f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    f"- –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç username\n"
                    f"- –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã\n"
                    f"- –ì—Ä—É–ø–ø–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
                )
                await callback.message.edit_text(error_message)
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                success_message = (
                    f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                    f"üì• –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {saved_users}\n"
                    f"üí° –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ username: {total_users - saved_users}"
                )
                await callback.message.edit_text(success_message)

        except Exception as e:
            error_message = (
                f"‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è!\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:\n"
                f"- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ\n"
                f"- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –ø—É–±–ª–∏—á–Ω–∞—è\n"
                f"- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            )
            await callback.message.edit_text(error_message)
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≥—Ä—É–ø–ø—ã {group[2]}: {e}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}"
        )


@router.message(BotStates.waiting_for_group_name)
async def parse_users_handler(message: Message, state: FSMContext, client=None):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.
    """
    try:
        input_text = message.text.strip()
        status_message = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É
            if input_text.isdigit():
                group_id = int(input_text)
                entity = await client.get_entity(group_id)
            else:
                group_username = input_text.lstrip("@")
                entity = await client.get_entity(group_username)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø—É –≤ –±–∞–∑—É
            db = Database("bot_database.db")
            db_group_id = db.execute(
                "INSERT OR IGNORE INTO groups (name, username) VALUES (?, ?)",
                (entity.title, entity.username if hasattr(entity, "username") else None),
            ).lastrowid
            db.commit()

            # –ü–∞—Ä—Å–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_participants = await parse_all_users(client, entity, status_message)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É
            users_count = 0
            for user in all_participants:
                if user.bot:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
                    continue

                user_data = {
                    "id": user.id,
                    "name": f"{user.first_name or ''} {user.last_name or ''}".strip(),
                    "username": user.username or "No username",
                    "is_active": not user.deleted,  # –û—Ç–º–µ—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    "is_bot": user.bot,
                    "is_admin": hasattr(user, "admin_rights") and user.admin_rights is not None,
                }

                if db.execute(
                    "INSERT OR IGNORE INTO contacts (username, group_id) VALUES (?, ?)",
                    (user_data["username"], db_group_id),
                ).rowcount:
                    users_count += 1

                if users_count % 100 == 0:
                    await status_message.edit_text(
                        f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É...\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {users_count}/{len(all_participants)}"
                    )

            # –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor = db.execute("SELECT COUNT(*) FROM contacts WHERE group_id = ?", (db_group_id,))
            total_users_in_db = cursor.fetchone()[0]

            await status_message.edit_text(
                f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"üë• –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(all_participants)}\n"
                f"‚ú® –ù–æ–≤—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–æ: {users_count}\n"
                f"üìù –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: {total_users_in_db}\n\n"
                f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n"
                f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {entity.title}\n"
                f"üîó Username: {f'@{entity.username}' if entity.username else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                f"üÜî ID: {entity.id}"
            )

        except ValueError as e:
            await status_message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: {str(e)}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ:\n"
                "1. ID –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234567890)\n"
                "2. –ò–ª–∏ username –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: @group –∏–ª–∏ group)"
            )
        except Exception as e:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")

    except Exception as e:
        await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()